#!/usr/bin/env python3

import requests
import json
import csv
import nmap
import pyfiglet
import ipaddress
import magic
import sys

#PRINT FORMAT
class bcolors:
    MEDIUM = '\033[92m' #GREEN
    HIGH = '\033[93m' #YELLOW
    CRITICAL = '\033[31m' #RED
    LOW = '\033[1;37m' # WHITE
    CPE = '\033[0;36m' #CYAN
    RESET = '\033[0m' #RESET COLOR
    UL = '\033[4m' #Under Line
    CPEH = '\u001b[34m'

#Intro
bannerName = pyfiglet.figlet_format('CVE Detective')
print(bannerName)

#Final output list of string CPEs
inputFinal = []

#_____________________________________________________
#Validation functions

#Menu Validation
def inputValCharTypeofInput(inputFromMenu):
    inputGood = True
    allowed = ['1','2','3']
    if any(x not in allowed for x in inputFromMenu):
        inputGood = False
    if inputFromMenu == 'test':
        inputGood = True
    return inputGood

#Manual Validation
def inputValCharManual(inputCPEs):
    inputGood = True
    #Checks for characters not found in CPEs
    allowed = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','1','2','3','4','5','6','7','8','9','0',',','*',' ',':','.','/','_']
    if any(x not in allowed for x in inputCPEs):
        inputGood = False
        print("Invalid input. Forbidden characters.")
    if (inputCPEs[-1] == ' ' or inputCPEs[-1] == ','):
        inputGood = False
        print("Invalid input. Do not end with a space or comma.")
    return inputGood

#File Name and Path Validation
def inputValCharFile(nameOrPath): #needs work
    inputGood = True

    filetype = magic.from_file(file, mime=True)

    if not(filetype == 'text/plain'):
        inputGood = False

    return inputGood

#__________________________________________________________
#Users select from menu

while True:
    TypeofInput = input ("""\nPlease select from the following:\n 1) To enter CPE value\n 2) To load file with CPE values\n 3) To run an nmap scan \nEnter number:  """)
    if not (inputValCharTypeofInput(TypeofInput)):
        print("Invalid input. Please try again.")
        continue
    else:
        break
        
#__________________________________________________________
#1) Manual Input of CPEs

if TypeofInput == "1":

    #Checks for valid input. Repeats check until valid input is entered.
    while True:
        CPEsString =  input("Enter CPE(s) separated by a comma \",\" :\n")
        if not (inputValCharManual(CPEsString)):
            continue
        else:
            break

    #Extracts CPEs from input string
    #Number of CPEs entered
    if len(CPEsString) > 0:
        NumofCPEs = CPEsString.count(",") + 1
        #One CPE
        if NumofCPEs == 1:
            inputFinal.append(CPEsString)
        #More than one CPE
        elif NumofCPEs > 1:
            if ", " in CPEsString:
                inputFinal = CPEsString.split(", ")
            else:
                inputFinal = CPEsString.split(",")

#_______________________________________________________
#2) File with list of CPEs

if TypeofInput == "2":

    #File name and path validation
    while True:
        try:
            file = input("Enter file name or path:\n")
            if (inputValCharFile(file)) != FileNotFoundError:
                break
        except FileNotFoundError:
            print("Invalid. Please try again.")

    #Read file
    with open(file) as f:
        lines = f.readlines()
        for item in lines:
          item = item.rstrip('\n')
          if inputValCharManual(item) == False:
            print(item + " appears to be invalid, please check your data.")
            sys.exit()
          inputFinal.append(item.strip())

#_______________________________________________________
#3) NMap Scan

if TypeofInput == "3":

    #IP address input validation
    while True:
        try:
            ip_addr = input("Please enter the IP address you would like to scan: \n")
            if (ipaddress.ip_address(ip_addr)) != ValueError:
                break
        except ValueError:
            print("Invalid IP address. Please try again.")
            continue

    #Nmap Scan
    scanner = nmap.PortScanner()

    #ip_addr = input("Please enter the IP address you would like to scan:\n")
    ports = '1-10000'

    #print(scanner.scan(ip_addr, ports, '-sV'))
    output = scanner.scan(ip_addr, ports, '-sV')
    #print(output['scan']['192.168.56.102']['tcp'])
    inner_dict = output['scan'][ip_addr]['tcp']
    for port_key in inner_dict:
        cpe = inner_dict[port_key]['cpe']
        #print(inner_dict[port_key]['cpe'])
        if cpe not in inputFinal:
            inputFinal.append(cpe)

#______________________________________________________
#server response (.json) parsing and manipulation

dict_CPE = {}
dict_noCVE = {'id':'No CVEs found','cvss':'N/A','summary':'N/A','references':'N/A'}
dict_error = {'id':'No CVEs found, error','cvss':'N/A','summary':'N/A','references':'N/A'}

###for loop to add each CPE as key to dict_CPE, list_CVE (server response) as value, dict_CVE_attributes ('id', 'CVSS' etc.) as sub-dictionaries
for i in range(len(inputFinal)):
  response = requests.get("https://vuln.sentnl.io/api/cvefor/" + inputFinal[i])
#  print(response.status_code)
  if response.status_code == 200 or response.status_code == 404:
    data = response.json()
#  print(data)
    dict_CPE[inputFinal[i]] = data
#  print(dict_CPE)
  else:
#    print(bcolors.FAIL + inputFinal[i] + bcolors.RESET + ": error, please check CPE")
#update dict_CPE with unresponsive CPE queries
    dict_CPE[inputFinal[i]] = [dict_error]
    continue

###iterate through CPE:CVE_list dictionary ("CPE_input":"server_response_list")
for key_CPE in dict_CPE:
#check for CPE w/o CVE
  if type(dict_CPE[key_CPE]) == dict and "No cves found" in dict_CPE[key_CPE].get('message'):
#    print(dict_CPE[key_CPE])
#update server response (dictionary) to list_dict_noCVE
    dict_CPE[key_CPE].update(dict_noCVE)
    dict_CPE[key_CPE] = [dict_CPE[key_CPE]]
#    print(dict_CPE)

###CSV writer_header
header = ["CPE","CVE","CVSS","Summary"]#,"References"]
with open('CVE_output.csv', 'w', encoding='UTF8') as f:
  writer = csv.writer(f)
  writer.writerow(header)

###iterate through CPE:CVE_list dictionary ("CPE_input":"server_response_list")
for key_CPE in dict_CPE:
  print("-" * 70 + '\n')
  print(bcolors.CPEH + key_CPE + bcolors.RESET + "\n")

###sort list of dict_CVE by CVSS:value, id:value per CPE
  dict_CPE_sorted = sorted(dict_CPE[key_CPE], key=lambda x: (x['cvss'], x['id']), reverse=True)
#  print(dict_CPE_sorted)

###iterate through list_dict_CVE per CPE to print
  for dict_CVE in dict_CPE_sorted:
#    print(dict_CVE)
    print("| " + str(dict_CVE['id']) + " ", end="")
  
    if type(dict_CVE['cvss']) == str:
      print("| CVSS: " + str(dict_CVE['cvss']) + bcolors.LOW + " [?]"+bcolors.RESET + '\n')
      continue

    if dict_CVE['cvss'] <= 3.9:
      print("| CVSS: " + str(dict_CVE['cvss']) + bcolors.LOW + " [LOW]"+bcolors.RESET + '\n')
  
    elif dict_CVE['cvss'] >= 4.0 and dict_CVE['cvss'] <= 6.9:
      print("| CVSS: " + str(dict_CVE['cvss']) + bcolors.MEDIUM + " [MEDIUM]"+bcolors.RESET + '\n')
  
    elif dict_CVE['cvss'] >= 7.0 and dict_CVE['cvss'] <= 8.9:
      print("| CVSS: " + str(dict_CVE['cvss']) + bcolors.HIGH + " [HIGH]"+bcolors.RESET + '\n')
      
    elif dict_CVE['cvss'] >= 9.0:
      print("| CVSS: " + str(dict_CVE["cvss"]) + bcolors.CRITICAL + " [CRITICAL]"+bcolors.RESET + '\n')
      
#      print("| Summary | " + str(dict_CVE['summary'][:100] + "\n")
  
    print(bcolors.UL+"NIST URL: " + "https://nvd.nist.gov/vuln/detail/" + str(dict_CVE['id'])+bcolors.RESET + '\n')

###CSV writer_data
    data = [
      key_CPE,
      str(dict_CVE['id']),
      str(dict_CVE['cvss']),
      str(dict_CVE['summary']),
#      str(dict_CVE['references'])
      ]
#    print(data)
    with open('CVE_output.csv', 'a', encoding='UTF8') as f:
      writer = csv.writer(f)
      writer.writerow(data)

print("-" * 70)
